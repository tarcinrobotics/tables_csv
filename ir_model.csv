id,create_uid,write_uid,model,order,state,name,info,transient,create_date,write_date,is_mail_thread,is_mail_activity,is_mail_blacklist,website_form_default_field_id,website_form_label,website_form_key,website_form_access
507,,,barcodes.barcode_events_mixin,id,base,"{""en_US"": ""Barcode Event Mixin""}"," Mixin class for objects reacting when a barcode is scanned in their form views
        which contains `<field name=""_barcode_scanned"" widget=""barcode_handler""/>`.
        Models using this mixin must implement the method on_barcode_scanned. It works
        like an onchange and receives the scanned barcode in parameter.
    ",f,,,f,f,f,,,,
508,,,barcode.nomenclature,id,base,"{""en_US"": ""Barcode Nomenclature""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
509,,,barcode.rule,"sequence asc, id",base,"{""en_US"": ""Barcode Rule""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
510,,,onboarding.progress,id,base,"{""en_US"": ""Onboarding Progress Tracker""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
511,,,onboarding.onboarding,"sequence asc, id desc",base,"{""en_US"": ""Onboarding""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
512,,,onboarding.onboarding.step,"sequence asc, id asc",base,"{""en_US"": ""Onboarding Step""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
513,,,onboarding.progress.step,id,base,"{""en_US"": ""Onboarding Progress Step Tracker""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
515,,,product.product,"priority desc, default_code, name, id",base,"{""en_US"": ""Product Variant""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,t,f,,,,
516,,,product.attribute,"sequence, id",base,"{""en_US"": ""Product Attribute""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
517,,,product.attribute.custom.value,"custom_product_template_attribute_value_id, id",base,"{""en_US"": ""Product Attribute Custom Value""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
518,,,product.attribute.value,"attribute_id, sequence, id",base,"{""en_US"": ""Attribute Value""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
519,,,product.catalog.mixin,id,base,"{""en_US"": ""Product Catalog Mixin""}"," This mixin should be inherited when the model should be able to work
    with the product catalog.
    It assumes the model using this mixin has a O2M field where the products are added/removed and
    this field's co-related model should has a method named `_get_product_catalog_lines_data`.
    ",f,,,f,f,f,,,,
520,,,product.category,complete_name,base,"{""en_US"": ""Product Category""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
521,,,product.document,name,base,"{""en_US"": ""Product Document""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
522,,,product.packaging,"product_id, sequence, id",base,"{""en_US"": ""Product Packaging""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
523,,,product.pricelist,"sequence asc, id asc",base,"{""en_US"": ""Pricelist""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,t,f,,,,
524,,,product.pricelist.item,"applied_on, min_quantity desc, categ_id desc, id desc",base,"{""en_US"": ""Pricelist Rule""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
525,,,product.supplierinfo,"sequence, min_qty DESC, price, id",base,"{""en_US"": ""Supplier Pricelist""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
526,,,product.tag,id,base,"{""en_US"": ""Product Tag""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
527,,,product.template.attribute.line,"sequence, attribute_id, id",base,"{""en_US"": ""Product Template Attribute Line""}","Attributes available on product.template with their selected values in a m2m.
    Used as a configuration model to generate the appropriate product.template.attribute.value",f,,,f,f,f,,,,
528,,,product.template.attribute.exclusion,"product_tmpl_id, id",base,"{""en_US"": ""Product Template Attribute Exclusion""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
529,,,product.template.attribute.value,"attribute_line_id, product_attribute_value_id, id",base,"{""en_US"": ""Product Template Attribute Value""}","Materialized relationship between attribute values
    and product template generated by the product.template.attribute.line",f,,,f,f,f,,,,
530,,,report.product.report_producttemplatelabel2x7,id,base,"{""en_US"": ""Product Label Report 2x7""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
531,,,report.product.report_producttemplatelabel4x7,id,base,"{""en_US"": ""Product Label Report 4x7""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
532,,,report.product.report_producttemplatelabel4x12,id,base,"{""en_US"": ""Product Label Report 4x12""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
533,,,report.product.report_producttemplatelabel4x12noprice,id,base,"{""en_US"": ""Product Label Report 4x12 No Price""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
534,,,report.product.report_producttemplatelabel_dymo,id,base,"{""en_US"": ""Product Label Report""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
535,,,report.product.report_pricelist,id,base,"{""en_US"": ""Pricelist Report""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
536,,,product.label.layout,id,base,"{""en_US"": ""Choose the sheet layout to print the labels""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
648,,,delivery.zip.prefix,"name, id",base,"{""en_US"": ""Delivery Zip Prefix""}", Zip prefix that a delivery.carrier will deliver to. ,f,,,f,f,f,,,,
649,,,choose.delivery.carrier,id,base,"{""en_US"": ""Delivery Carrier Selection Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
650,,,sale.order.option,"sequence, id",base,"{""en_US"": ""Sale Options""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
651,,,sale.order.template,id,base,"{""en_US"": ""Quotation Template""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
652,,,sale.order.template.line,"sale_order_template_id, sequence, id",base,"{""en_US"": ""Quotation Template Line""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
653,,,sale.order.template.option,id,base,"{""en_US"": ""Quotation Template Option""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
654,,,slide.slide.partner,id,base,"{""en_US"": ""Slide / Partner decorated m2m""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
655,,,slide.tag,id,base,"{""en_US"": ""Slide Tag""}", Tag to search slides across channels. ,f,,,f,f,f,,,,
656,,,slide.slide,"sequence asc, is_category asc, id asc",base,"{""en_US"": ""Slides""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
657,,,slide.question,sequence,base,"{""en_US"": ""Content Quiz Question""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
658,,,slide.answer,"question_id, sequence, id",base,"{""en_US"": ""Slide Question's Answer""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
37,,,ir.config_parameter,key,base,"{""en_US"": ""System Parameter""}",Per-database storage of configuration key-value pairs.,f,,,f,f,f,,,,
39,,,ir.mail_server,"sequence, id",base,"{""en_US"": ""Mail Server""}","Represents an SMTP server, able to send outgoing emails, with SSL and TLS capabilities.",f,,,f,f,f,,,,
659,,,slide.embed,id,base,"{""en_US"": ""Embedded Slides View Counter""}"," Embedding in third party websites. Track view count, generate statistics. ",f,,,f,f,f,,,,
24,,,ir.actions.server,"sequence,name",base,"{""en_US"": ""Server Action""}", Add website option in server actions. ,f,,,f,f,f,,,,
537,,,crm.team.member,"create_date ASC, id",base,"{""en_US"": ""Sales Team Member""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
538,,,crm.team,"sequence ASC, create_date DESC, id DESC",base,"{""en_US"": ""Sales Team""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
539,,,crm.tag,id,base,"{""en_US"": ""CRM Tag""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
540,,,event.type,"sequence, id",base,"{""en_US"": ""Event Template""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
541,,,event.event,"date_begin, id",base,"{""en_US"": ""Event""}",Event,f,,,t,t,f,,,,
542,,,event.type.mail,id,base,"{""en_US"": ""Mail Scheduling on Event Category""}"," Template of event.mail to attach to event.type. Those will be copied
    upon all events created in that type to ease event creation. ",f,,,f,f,f,,,,
543,,,event.mail,id,base,"{""en_US"": ""Event Automated Mailing""}"," Event automated mailing. This model replaces all existing fields and
    configuration allowing to send emails on events since Odoo 9. A cron exists
    that periodically checks for mailing to run. ",f,,,f,f,f,,,,
544,,,event.mail.registration,scheduled_date DESC,base,"{""en_US"": ""Registration Mail Scheduler""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
545,,,event.registration,id desc,base,"{""en_US"": ""Event Registration""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,t,f,,,,
546,,,event.stage,"sequence, name",base,"{""en_US"": ""Event Stage""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
547,,,event.tag.category,sequence,base,"{""en_US"": ""Event Tag Category""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
548,,,event.tag,"category_sequence, sequence, id",base,"{""en_US"": ""Event Tag""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
551,,,payment.method,"active desc, sequence, name",base,"{""en_US"": ""Payment Method""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
552,,,payment.provider,"module_state, state desc, sequence, name",base,"{""en_US"": ""Payment Provider""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
45,,,ir.qweb.field.date,id,base,"{""en_US"": ""Qweb Field Date""}"," Used to convert a t-field specification into an output HTML field.

    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:

    * converts the record value to html using :meth:`~.record_to_html`
    * generates the metadata attributes (``data-oe-``) to set on the root
      result node
    * generates the root result node itself through :meth:`~.render_element`
    ",f,,,f,f,f,,,,
553,,,payment.token,"partner_id, id desc",base,"{""en_US"": ""Payment Token""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
554,,,payment.transaction,id desc,base,"{""en_US"": ""Payment Transaction""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
555,,,payment.capture.wizard,id,base,"{""en_US"": ""Payment Capture Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
557,,,payment.provider.onboarding.wizard,id,base,"{""en_US"": ""Payment provider onboarding wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
556,,,payment.link.wizard,id,base,"{""en_US"": ""Generate Sales Payment Link""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
660,,,slide.channel.partner,id,base,"{""en_US"": ""Channel / Partners (Members)""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
661,,,slide.channel,"sequence, id",base,"{""en_US"": ""Course""}", A channel is a container of slides. ,f,,,t,t,f,,,,
662,,,slide.channel.tag.group,sequence asc,base,"{""en_US"": ""Channel/Course Groups""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
663,,,slide.channel.tag,"group_sequence asc, sequence asc",base,"{""en_US"": ""Channel/Course Tag""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
664,,,slide.slide.resource,id,base,"{""en_US"": ""Additional resource for a particular slide""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
665,,,slide.channel.invite,id,base,"{""en_US"": ""Channel Invitation Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
549,,,event.type.ticket,"sequence, price, name, id",base,"{""en_US"": ""Event Template Ticket""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
550,,,event.event.ticket,"event_id, sequence, price, name, id",base,"{""en_US"": ""Event Ticket""}"," Ticket model allowing to have different kind of registrations for a given
    event. Ticket are based on ticket type as they share some common fields
    and behavior. Those models come from <= v13 Odoo event.event.ticket that
    modeled both concept: tickets for event templates, and tickets for events. ",f,,,f,f,f,,,,
668,,,event.sale.report,id,base,"{""en_US"": ""Event Sales Report""}","Event Registrations-based sales report, allowing to analyze sales and number of seats
    by event (type), ticket, etc. Each opened record will also give access to all this information.",f,,,f,f,f,,,,
669,,,registration.editor,id,base,"{""en_US"": ""Edit Attendee Details on Sales Confirmation""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
670,,,registration.editor.line,id desc,base,"{""en_US"": ""Edit Attendee Line on Sales Confirmation""}",Event Registration,t,,,f,f,f,,,,
671,,,event.event.configurator,id,base,"{""en_US"": ""Event Configurator""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
672,,,product.image,"sequence, id",base,"{""en_US"": ""Product Image""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
673,,,product.public.category,"sequence, name, id",base,"{""en_US"": ""Website Product Category""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
674,,,product.ribbon,id,base,"{""en_US"": ""Product ribbon""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
514,,,product.template,"priority desc, name",base,"{""en_US"": ""Product""}",This mixin adds rating statistics to mail.thread that already support ratings.,f,,,t,t,f,,,,
676,,,website.sale.extra.field,sequence,base,"{""en_US"": ""E-Commerce Extra Info Shown on product page""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
558,,,sequence.mixin,id,base,"{""en_US"": ""Automatic sequence""}","Mechanism used to have an editable sequence number.

    Be careful of how you use this regarding the prefixes. More info in the
    docstring of _get_last_sequence.
    ",f,,,f,f,f,,,,
559,,,account.fiscal.position,sequence,base,"{""en_US"": ""Fiscal Position""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
560,,,account.fiscal.position.tax,id,base,"{""en_US"": ""Tax Mapping of Fiscal Position""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
561,,,account.fiscal.position.account,id,base,"{""en_US"": ""Accounts Mapping of Fiscal Position""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
88,,,res.partner.bank,"sequence, id",base,"{""en_US"": ""Bank Accounts""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,t,f,,,,
563,,,account.account.tag,id,base,"{""en_US"": ""Account Tag""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
564,,,account.account,"code, company_id",base,"{""en_US"": ""Account""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
565,,,account.group,code_prefix_start,base,"{""en_US"": ""Account Group""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
566,,,account.root,id,base,"{""en_US"": ""Account codes first 2 digits""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
567,,,account.journal.group,id,base,"{""en_US"": ""Account Journal Group""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
568,,,account.journal,"sequence, type, code",base,"{""en_US"": ""Journal""}",Populate factory part for account.journal.,f,,,t,t,f,,,,
569,,,account.tax.group,"sequence asc, id",base,"{""en_US"": ""Tax Group""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
570,,,account.tax,"sequence,id",base,"{""en_US"": ""Tax""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
571,,,account.tax.repartition.line,"document_type, repartition_type, sequence, id",base,"{""en_US"": ""Tax Repartition Line""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
572,,,account.reconcile.model.partner.mapping,id,base,"{""en_US"": ""Partner mapping for reconciliation models""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
573,,,account.reconcile.model.line,"sequence, id",base,"{""en_US"": ""Rules for the reconciliation model""}",Populate factory part for account.reconcile.model.line.,f,,,f,f,f,,,,
574,,,account.reconcile.model,"sequence, id",base,"{""en_US"": ""Preset to create journal entries during a invoices and payments matching""}",Populate factory part for account.reconcile.model.,f,,,t,f,f,,,,
575,,,account.payment.term,"sequence, id",base,"{""en_US"": ""Payment Terms""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
576,,,account.payment.term.line,id,base,"{""en_US"": ""Payment Terms Line""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
577,,,account.move,"date desc, name desc, invoice_date desc, id desc",base,"{""en_US"": ""Journal Entry""}","Populate factory part for account.move.

    Because of the complicated nature of the interraction of account.move and account.move.line,
    both models are actualy generated in the same factory.
    ",f,,,t,t,f,,,,
578,,,account.move.line,"date desc, move_name desc, id",base,"{""en_US"": ""Journal Item""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
579,,,account.partial.reconcile,id,base,"{""en_US"": ""Partial Reconcile""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
580,,,account.full.reconcile,id,base,"{""en_US"": ""Full Reconcile""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
581,,,account.payment,"date desc, name desc",base,"{""en_US"": ""Payments""}",Populate factory part for account.payment.,f,,,t,t,f,,,,
582,,,account.payment.method,id,base,"{""en_US"": ""Payment Methods""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
583,,,account.payment.method.line,"sequence, id",base,"{""en_US"": ""Payment Methods""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
584,,,account.bank.statement,first_line_index desc,base,"{""en_US"": ""Bank Statement""}",Populate factory part for account.bank.statements.,f,,,f,f,f,,,,
585,,,account.bank.statement.line,internal_index desc,base,"{""en_US"": ""Bank Statement Line""}",Populate factory part for account.bank.statements.line.,f,,,f,f,f,,,,
586,,,account.chart.template,id,base,"{""en_US"": ""Account Chart Template""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
588,,,account.cash.rounding,id,base,"{""en_US"": ""Account Cash Rounding""}","
    In some countries, we need to be able to make appear on an invoice a rounding line, appearing there only because the
    smallest coinage has been removed from the circulation. For example, in Switzerland invoices have to be rounded to
    0.05 CHF because coins of 0.01 CHF and 0.02 CHF aren't used anymore.
    see https://en.wikipedia.org/wiki/Cash_rounding for more details.
    ",f,,,f,f,f,,,,
589,,,account.incoterms,id,base,"{""en_US"": ""Incoterms""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
590,,,account.report,"sequence, id",base,"{""en_US"": ""Accounting Report""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
591,,,account.report.line,"sequence, id",base,"{""en_US"": ""Accounting Report Line""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
592,,,account.report.expression,id,base,"{""en_US"": ""Accounting Report Expression""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
593,,,account.report.column,"sequence, id",base,"{""en_US"": ""Accounting Report Column""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
594,,,account.report.external.value,"date, id",base,"{""en_US"": ""Accounting Report External Value""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
595,,,account.automatic.entry.wizard,id,base,"{""en_US"": ""Create Automatic Entries""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
596,,,account.unreconcile,id,base,"{""en_US"": ""Account Unreconcile""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
597,,,validate.account.move,id,base,"{""en_US"": ""Validate Account Move""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
598,,,account.move.reversal,id,base,"{""en_US"": ""Account Move Reversal""}","
    Account move reversal wizard, it cancel an account move by reversing it.
    ",t,,,f,f,f,,,,
599,,,account.resequence.wizard,id,base,"{""en_US"": ""Remake the sequence of Journal Entries.""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
30,,,ir.cron,cron_name,base,"{""en_US"": ""Scheduled Actions""}"," Model describing cron jobs (also called actions or tasks).
    ",f,,,f,f,f,,,,
104,,,res.users.apikeys.show,id,base,"{""en_US"": ""Show API Key""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
733,,,op.media,name,base,"{""en_US"": ""Media Details""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
600,,,account.financial.year.op,id,base,"{""en_US"": ""Opening Balance of Financial Year""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
601,,,account.setup.bank.manual.config,id,base,"{""en_US"": ""Bank setup manual config""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
602,,,account.move.send,id,base,"{""en_US"": ""Account Move Send""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
603,,,account.payment.register,id,base,"{""en_US"": ""Register Payment""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
604,,,account.tour.upload.bill,id,base,"{""en_US"": ""Account tour upload bill""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
605,,,account.tour.upload.bill.email.confirm,id,base,"{""en_US"": ""Account tour upload bill email confirm""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
606,,,account.accrued.orders.wizard,id,base,"{""en_US"": ""Accrued Orders Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
607,,,account.invoice.report,invoice_date desc,base,"{""en_US"": ""Invoices Statistics""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
608,,,report.account.report_invoice,id,base,"{""en_US"": ""Account report without payment lines""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
609,,,report.account.report_invoice_with_payments,id,base,"{""en_US"": ""Account report with payment lines""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
610,,,report.account.report_hash_integrity,id,base,"{""en_US"": ""Get hash integrity result as PDF.""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
677,,,website.base.unit,name,base,"{""en_US"": ""Unit of Measure for price per unit on eCommerce products.""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
678,,,l10n_in.port.code,id,base,"{""en_US"": ""Indian port code""}",Port code must be mentioned in export and import of goods under GST.,f,,,f,f,f,,,,
680,,,grading.assignment,id,base,"{""en_US"": ""Grading Assignment""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
681,,,op.assignment,submission_date DESC,base,"{""en_US"": ""Assignment""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
682,,,op.assignment.sub.line,submission_date DESC,base,"{""en_US"": ""Assignment Submission""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
683,,,grading.assignment.type,id,base,"{""en_US"": ""Assignment Type""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
684,,,op.fees.terms.line,id,base,"{""en_US"": ""Fees Details Line""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
685,,,op.fees.terms,id,base,"{""en_US"": ""Fees Terms For Course""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
686,,,op.fees.element,id,base,"{""en_US"": ""Fees Element for course""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
123,,,base.import.module,id,base,"{""en_US"": ""Import Module""}", Import Module ,t,,,f,f,f,,,,
611,,,chatbot.message,"create_date desc, id desc",base,"{""en_US"": ""Chatbot Message""}"," Chatbot Mail Message
        We create a new model to store the related step to a mail.message and the user's answer.
        We do this in a new model to avoid bloating the 'mail.message' model.
    ",f,,,f,f,f,,,,
612,,,chatbot.script,"title, id",base,"{""en_US"": ""Chatbot Script""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
613,,,chatbot.script.answer,"script_step_id, sequence, id",base,"{""en_US"": ""Chatbot Script Answer""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
614,,,chatbot.script.step,"sequence, id",base,"{""en_US"": ""Chatbot Script Step""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
617,,,im_livechat.channel,id,base,"{""en_US"": ""Livechat Channel""}"," Livechat Channel
        Define a communication channel, which can be accessed with 'script_external' (script tag to put on
        external website), 'script_internal' (code to be integrated with odoo website) or via 'web_page' link.
        It provides rating tools, and access rules for anonymous people.
    ",f,,,f,f,f,,,,
618,,,im_livechat.channel.rule,sequence asc,base,"{""en_US"": ""Livechat Channel Rules""}"," Channel Rules
        Rules defining access to the channel (countries, and url matching). It also provide the 'auto pop'
        option to open automatically the conversation.
    ",f,,,f,f,f,,,,
620,,,im_livechat.report.channel,"start_date, technical_name",base,"{""en_US"": ""Livechat Support Channel Report""}", Livechat Support Report on the Channels ,f,,,f,f,f,,,,
148,,,mail.alias,"alias_model_id, alias_name",base,"{""en_US"": ""Email Aliases""}","A Mail Alias is a mapping of an email address with a given Odoo Document
       model. It is used by Odoo's mail gateway when processing incoming emails
       sent to the system. If the recipient address (To) of the message matches
       a Mail Alias, the message will be either processed following the rules
       of that alias. If the message is a reply it will be attached to the
       existing discussion on the corresponding record, otherwise a new
       record of the corresponding model will be created.

       This is meant to be used in combination with a catch-all email configuration
       on the company's mail server, so that as soon as a new mail.alias is
       created, it becomes immediately usable and Odoo will accept email for it.
     ",f,,,f,f,f,,,,
149,,,mail.alias.domain,"sequence ASC, id ASC",base,"{""en_US"": ""Email Domain""}"," Model alias domains, now company-specific. Alias domains are email
    domains used to receive emails through catchall and bounce aliases, as
    well as using mail.alias records to redirect email replies.

    This replaces ``mail.alias.domain`` configuration parameter use until v16.
    ",f,,,f,f,f,,,,
1,,,base,id,base,"{""en_US"": ""Base""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
151,,,mail.activity.mixin,id,base,"{""en_US"": ""Activity Mixin""}"," Mail Activity Mixin is a mixin class to use if you want to add activities
    management on a model. It works like the mail.thread mixin. It defines
    an activity_ids one2many field toward activities using res_id and res_model_id.
    Various related / computed fields are also added to have a global status of
    activities on documents.

    Activities come with a new JS widget for the form view. It is integrated in the
    Chatter widget although it is a separate widget. It displays activities linked
    to the current record and allow to schedule, edit and mark done activities.
    Just include field activity_ids in the div.oe-chatter to use it.

    There is also a kanban widget defined. It defines a small widget to integrate
    in kanban vignettes. It allow to manage activities directly from the kanban
    view. Use widget=""kanban_activity"" on activitiy_ids field in kanban view to
    use it.

    Some context keys allow to control the mixin behavior. Use those in some
    specific cases like import

     * ``mail_activity_automation_skip``: skip activities automation; it means
       no automated activities will be generated, updated or unlinked, allowing
       to save computation and avoid generating unwanted activities;
    ",f,,,f,t,f,,,,
152,,,mail.alias.mixin.optional,id,base,"{""en_US"": ""Email Aliases Mixin (light)""}"," A mixin for models that handles underlying 'mail.alias' records to use
    the mail gateway. Field is not mandatory and its creation is done dynamically
    based on given 'alias_name', allowing to gradually populate the alias table
    without having void aliases as when used with an inherits-like implementation.
    ",f,,,f,f,f,,,,
153,,,mail.alias.mixin,id,base,"{""en_US"": ""Email Aliases Mixin""}"," A mixin for models that inherits mail.alias to have a one-to-one relation
    between the model and its alias. ",f,,,f,f,f,,,,
154,,,mail.render.mixin,id,base,"{""en_US"": ""Mail Render Mixin""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
155,,,mail.composer.mixin,id,base,"{""en_US"": ""Mail Composer Mixin""}"," Mixin used to edit and render some fields used when sending emails or
    notifications based on a mail template.

    Main current purpose is to hide details related to subject and body computation
    and rendering based on a mail.template. It also give the base tools to control
    who is allowed to edit body, notably when dealing with templating language
    like inline_template or qweb.

    It is meant to evolve in a near future with upcoming support of qweb and fine
    grain control of rendering access.
    ",f,,,f,f,f,,,,
175,,,mail.message.translation,id,base,"{""en_US"": ""Message Translation""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
143,,,utm.mixin,id,base,"{""en_US"": ""UTM Mixin""}", Mixin class for objects which can be tracked by marketing. ,f,,,f,f,f,,,,
156,,,mail.thread,id,base,"{""en_US"": ""Email Thread""}", Update MailThread to add the support of bounce management in mass mailing traces. ,f,,,t,f,f,,,,
621,,,im_livechat.report.operator,"livechat_channel_id, partner_id",base,"{""en_US"": ""Livechat Support Operator Report""}", Livechat Support Report on the Operator ,f,,,f,f,f,,,,
622,,,account.edi.common,id,base,"{""en_US"": ""Common functions for EDI documents: generate the data, the constraints, etc""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
157,,,mail.thread.blacklist,id,base,"{""en_US"": ""Mail Blacklist mixin""}"," Mixin that is inherited by all model with opt out. This mixin stores a normalized
    email based on primary_email field.

    A normalized email is considered as :
        - having a left part + @ + a right part (the domain can be without '.something')
        - being lower case
        - having no name before the address. Typically, having no 'Name <>'
    Ex:
        - Formatted Email : 'Name <NaMe@DoMaIn.CoM>'
        - Normalized Email : 'name@domain.com'

    The primary email field can be specified on the parent model, if it differs from the default one ('email')
    The email_normalized field can than be used on that model to search quickly on emails (by simple comparison
    and not using time consuming regex anymore).

    Using this email_normalized field, blacklist status is computed.

    Mail Thread capabilities are required for this mixin. ",f,,,t,f,t,,,,
623,,,account.edi.xml.cii,id,base,"{""en_US"": ""Factur-x/XRechnung CII 2.2.0""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
159,,,mail.thread.main.attachment,id,base,"{""en_US"": ""Mail Main Attachment management""}", Mixin that adds main attachment support to the MailThread class. ,f,,,t,f,f,,,,
160,,,mail.tracking.duration.mixin,id,base,"{""en_US"": ""Mixin to compute the time a record has spent in each value a many2one field can take""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
161,,,template.reset.mixin,id,base,"{""en_US"": ""Template Reset Mixin""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
162,,,fetchmail.server,priority,base,"{""en_US"": ""Incoming Mail Server""}",Incoming POP/IMAP mail server account,f,,,f,f,f,,,,
163,,,mail.notification,id,base,"{""en_US"": ""Message Notifications""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
164,,,mail.activity.type,"sequence, id",base,"{""en_US"": ""Activity Type""}"," Activity Types are used to categorize activities. Each type is a different
    kind of activity e.g. call, mail, meeting. An activity can be generic i.e.
    available for all models using activities; or specific to a model in which
    case res_model field should be used. ",f,,,f,f,f,,,,
165,,,mail.activity,"date_deadline ASC, id ASC",base,"{""en_US"": ""Activity""}"," An actual activity to perform. Activities are linked to
    documents using res_id and res_model_id fields. Activities have a deadline
    that can be used in kanban view to display a status. Once done activities
    are unlinked and a message is posted. This message has a new activity_type_id
    field that indicates the activity linked to the message. ",f,,,f,f,f,,,,
166,,,mail.activity.plan,id DESC,base,"{""en_US"": ""Activity Plan""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
167,,,mail.activity.plan.template,"sequence,id",base,"{""en_US"": ""Activity plan template""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
168,,,mail.blacklist,id,base,"{""en_US"": ""Mail Blacklist""}", Model of blacklisted email addresses to stop sending emails.,f,,,t,f,f,,,,
169,,,mail.followers,id,base,"{""en_US"": ""Document Followers""}"," mail_followers holds the data related to the follow mechanism inside
    Odoo. Partners can choose to follow documents (records) of any kind
    that inherits from mail.thread. Following documents allow to receive
    notifications for new messages. A subscription is characterized by:

    :param: res_model: model of the followed objects
    :param: res_id: ID of resource (may be 0 for every objects)
    ",f,,,f,f,f,,,,
170,,,mail.gateway.allowed,id,base,"{""en_US"": ""Mail Gateway Allowed""}","List of trusted email address which won't have the quota restriction.

    The incoming emails have a restriction of the number of records they can
    create with alias, defined by the 2 systems parameters;
    - mail.gateway.loop.minutes
    - mail.gateway.loop.threshold

    But we might have some legit use cases for which we want to receive a ton of emails
    from an automated-source. This model stores those trusted source and this restriction
    won't apply to them.
    ",f,,,f,f,f,,,,
171,,,mail.link.preview,id,base,"{""en_US"": ""Store link preview data""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
172,,,mail.message.reaction,id desc,base,"{""en_US"": ""Message Reaction""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
173,,,mail.message.schedule,"scheduled_datetime DESC, id DESC",base,"{""en_US"": ""Scheduled Messages""}"," Mail message notification schedule queue.

    This model is used to store the mail messages scheduled. So we can
    delay the sending of the notifications. A scheduled date field already
    exists on the <mail.mail> but it does not allow us to delay the sending
    of the <bus.bus> notifications.
    ",f,,,f,f,f,,,,
174,,,mail.message.subtype,"sequence, id",base,"{""en_US"": ""Message subtypes""}"," Class holding subtype definition for messages. Subtypes allow to tune
        the follower subscription, allowing only some subtypes to be pushed
        on the Wall. ",f,,,f,f,f,,,,
624,,,account.edi.xml.ubl_20,id,base,"{""en_US"": ""UBL 2.0""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
625,,,account.edi.xml.ubl_21,id,base,"{""en_US"": ""UBL 2.1""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
626,,,account.edi.xml.ubl_bis3,id,base,"{""en_US"": ""UBL BIS Billing 3.0.12""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
627,,,account.edi.xml.ubl_de,id,base,"{""en_US"": ""BIS3 DE (XRechnung)""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
628,,,account.edi.xml.ubl_nl,id,base,"{""en_US"": ""SI-UBL 2.0 (NLCIUS)""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
629,,,account.edi.xml.ubl_efff,id,base,"{""en_US"": ""E-FFF (BE)""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
630,,,account.edi.xml.ubl_a_nz,id,base,"{""en_US"": ""A-NZ BIS Billing 3.0""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
94,,,res.company,"sequence, name",base,"{""en_US"": ""Companies""}",Populate factory part for the accountings applications of res.company.,f,,,t,f,f,,,,
178,,,mail.tracking.value,id DESC,base,"{""en_US"": ""Mail Tracking Value""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
179,,,mail.template,"user_id,name,id",base,"{""en_US"": ""Email Templates""}",Templates for sending email,f,,,f,f,f,,,,
180,,,mail.ice.server,id,base,"{""en_US"": ""ICE server""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
181,,,mail.shortcode,id,base,"{""en_US"": ""Canned Response / Shortcode""}"," Shortcode
        Canned Responses, allowing the user to defined shortcuts in its message. Should be applied before storing message in database.
        Emoji allowing replacing text with image for visual effect. Should be applied when the message is displayed (only for final rendering).
        These shortcodes are global and are available for every user.
    ",f,,,f,f,f,,,,
105,,,res.users.settings,id,base,"{""en_US"": ""User Settings""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
183,,,res.users.settings.volumes,id,base,"{""en_US"": ""User Settings Volumes""}", Represents the volume of the sound that the user of user_setting_id will receive from partner_id. ,f,,,f,f,f,,,,
125,,,bus.presence,id,base,"{""en_US"": ""User Presence""}"," User Presence
        Its status is 'online', 'away' or 'offline'. This model should be a one2one, but is not
        attached to res_users to avoid database concurrence errors. Since the 'update_presence' method is executed
        at each poll, if the user have multiple opened tabs, concurrence errors can happend, but are 'muted-logged'.
    ",f,,,f,f,f,,,,
21,,,ir.actions.act_window.view,"sequence,id",base,"{""en_US"": ""Action Window View""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
28,,,ir.attachment,id desc,base,"{""en_US"": ""Attachment""}","Attachments are used to link binary files or url to any openerp document.

    External attachment storage
    ---------------------------

    The computed field ``datas`` is implemented using ``_file_read``,
    ``_file_write`` and ``_file_delete``, which can be overridden to implement
    other storage engines. Such methods should check for other location pseudo
    uri (example: hdfs://hadoopserver).

    The default implementation is the file:dirname location that stores files
    on the local filesystem using name based on their sha1 hash
    ",f,,,f,f,f,,,,
62,,,ir.http,id,base,"{""en_US"": ""HTTP Routing""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
3,,,ir.model,"is_mail_thread DESC, name ASC",base,"{""en_US"": ""Models""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
16,,,ir.ui.view,"priority,name,id",base,"{""en_US"": ""View""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
91,,,res.config.settings,id,base,"{""en_US"": ""Config Settings""}"," Inherit the base settings to add a counter of failed email + configure
    the alias domain. ",t,,,f,f,f,,,,
198,,,publisher_warranty.contract,id,base,"{""en_US"": ""Publisher Warranty Contract""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
41,,,ir.qweb,id,base,"{""en_US"": ""Qweb""}", IrQWeb object for rendering stuff in the website context ,f,,,f,f,f,,,,
4,,,ir.model.fields,name,base,"{""en_US"": ""Fields""}", fields configuration for form builder ,f,,,f,f,f,,,,
97,,,res.users,"name, login",base,"{""en_US"": ""User""}"," Update of res.users class
        - add a preference about username for livechat purpose
    ",f,,,f,f,f,,,,
177,,1,mail.mail,id desc,base,"{""en_US"": ""Outgoing Mails""}",Add the mass mailing campaign data to mail,f,,2024-04-18 07:40:52.262475,f,f,f,2056,Send an E-mail,send_mail,t
631,,,account.edi.xml.ubl_sg,id,base,"{""en_US"": ""SG BIS Billing 3.0""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
632,,,payment.refund.wizard,id,base,"{""en_US"": ""Payment Refund Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
633,,,sale.order,"date_order desc, id desc",base,"{""en_US"": ""Sales Order""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,t,f,,,,
634,,,sale.order.line,"order_id, sequence, id",base,"{""en_US"": ""Sales Order Line""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
199,,,mail.notification.web.push,id,base,"{""en_US"": ""Cron data used for web push notification""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
200,,,mail.partner.device,id,base,"{""en_US"": ""Partner Web Push Device""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
201,,,discuss.channel.member,id,base,"{""en_US"": ""Channel Member""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
202,,,discuss.channel.rtc.session,id,base,"{""en_US"": ""Mail RTC session""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
204,,,discuss.gif.favorite,id,base,"{""en_US"": ""Save favorite GIF from Tenor API""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
205,,,discuss.voice.metadata,id,base,"{""en_US"": ""Metadata for voice attachments""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
206,,,mail.guest,id,base,"{""en_US"": ""Guest""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
126,,,ir.websocket,id,base,"{""en_US"": ""websocket message handling""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
95,,,res.groups,name,base,"{""en_US"": ""Access Groups""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
203,,,discuss.channel,id,base,"{""en_US"": ""Discussion Channel""}"," Chat Session
        Reprensenting a conversation between users.
        It extends the base method for anonymous usage.
    ",f,,,t,f,f,,,,
113,,,base.module.uninstall,id,base,"{""en_US"": ""Module Uninstall""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
116,,,base.partner.merge.automatic.wizard,id,base,"{""en_US"": ""Merge Partner Wizard""}","
        The idea behind this wizard is to create a list of potential partners to
        merge. We use two objects, the first one is the wizard for the end-user.
        And the second will contain the partner list to merge.
    ",t,,,f,f,f,,,,
212,,,mail.blacklist.remove,id,base,"{""en_US"": ""Remove email from blacklist wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
213,,,mail.compose.message,id,base,"{""en_US"": ""Email composition wizard""}"," Generic message composition wizard. You may inherit from this wizard
        at model and view levels to provide specific features.

        The behavior of the wizard depends on the composition_mode field:
        - 'comment': post on a record.
        - 'mass_mail': wizard in mass mailing mode where the mail details can
            contain template placeholders that will be merged with actual data
            before being sent to each recipient.
    ",t,,,f,f,f,,,,
214,,,mail.activity.schedule,id,base,"{""en_US"": ""Activity schedule plan Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
215,,,mail.resend.message,id,base,"{""en_US"": ""Email resend wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
216,,,mail.resend.partner,id,base,"{""en_US"": ""Partner with additional information for mail resend""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
217,,,mail.template.preview,id,base,"{""en_US"": ""Email Template Preview""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
29,,,ir.binary,id,base,"{""en_US"": ""File streaming helper model for controllers""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
218,,,mail.template.reset,id,base,"{""en_US"": ""Mail Template Reset""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
219,,,mail.wizard.invite,id,base,"{""en_US"": ""Invite wizard""}", Wizard to invite partners (or channels) and make them followers. ,t,,,f,f,f,,,,
2,,,_unknown,id,base,"{""en_US"": ""Unknown""}","
    Abstract model used as a substitute for relational fields with an unknown
    comodel.
    ",f,,,f,f,f,,,,
5,,,ir.model.inherit,id,base,"{""en_US"": ""Model Inheritance Tree""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
6,,,ir.model.fields.selection,"sequence, id",base,"{""en_US"": ""Fields Selection""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
7,,,ir.model.constraint,id,base,"{""en_US"": ""Model Constraint""}","
    This model tracks PostgreSQL foreign keys and constraints used by Odoo
    models.
    ",f,,,f,f,f,,,,
8,,,ir.model.relation,id,base,"{""en_US"": ""Relation Model""}","
    This model tracks PostgreSQL tables used to implement Odoo many2many
    relations.
    ",f,,,f,f,f,,,,
9,,,ir.model.access,"model_id,group_id,name,id",base,"{""en_US"": ""Model Access""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
10,,,ir.model.data,"module, model, name",base,"{""en_US"": ""Model Data""}","Holds external identifier keys for records in the database.
       This has two main uses:

           * allows easy data integration with third-party systems,
             making import/export/sync of data possible, as records
             can be uniquely identified across multiple systems
           * allows tracking the origin of data installed by Odoo
             modules themselves, thus making it possible to later
             update them seamlessly.
    ",f,,,f,f,f,,,,
11,,,wizard.ir.model.menu.create,id,base,"{""en_US"": ""Create Menu Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
12,,,ir.sequence,name,base,"{""en_US"": ""Sequence""}"," Sequence model.

    The sequence model allows to define and use so-called sequence objects.
    Such objects are used to generate unique identifiers in a transaction-safe
    way.

    ",f,,,f,f,f,,,,
13,,,ir.sequence.date_range,id,base,"{""en_US"": ""Sequence Date Range""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
14,,,ir.ui.menu,"sequence,id",base,"{""en_US"": ""Menu""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
15,,,ir.ui.view.custom,create_date desc,base,"{""en_US"": ""Custom View""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
17,,,reset.view.arch.wizard,id,base,"{""en_US"": ""Reset View Architecture Wizard""}", A wizard to compare and reset views architecture. ,t,,,f,f,f,,,,
18,,,ir.asset,"sequence, id",base,"{""en_US"": ""Asset""}","This model contributes to two things:

        1. It provides a function returning a list of all file paths declared
        in a given list of addons (see _get_addon_paths);

        2. It allows to create 'ir.asset' records to add additional directives
        to certain bundles.
    ",f,,,f,f,f,,,,
19,,,ir.actions.actions,name,base,"{""en_US"": ""Actions""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
20,,,ir.actions.act_window,name,base,"{""en_US"": ""Action Window""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
22,,,ir.actions.act_window_close,name,base,"{""en_US"": ""Action Window Close""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
23,,,ir.actions.act_url,name,base,"{""en_US"": ""Action URL""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
25,,,ir.actions.todo,"sequence, id",base,"{""en_US"": ""Configuration Wizards""}","
    Configuration Wizards
    ",f,,,f,f,f,,,,
26,,,ir.actions.client,name,base,"{""en_US"": ""Client Action""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
27,,,ir.actions.report,"name, id",base,"{""en_US"": ""Report Action""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
31,,,ir.cron.trigger,id,base,"{""en_US"": ""Triggered actions""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
32,,,ir.filters,"model_id, name, id desc",base,"{""en_US"": ""Filters""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
33,,,ir.default,id,base,"{""en_US"": ""Default Values""}", User-defined default values for fields. ,f,,,f,f,f,,,,
34,,,ir.exports,name,base,"{""en_US"": ""Exports""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
35,,,ir.exports.line,id,base,"{""en_US"": ""Exports Line""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
36,,,ir.rule,"model_id DESC,id",base,"{""en_US"": ""Record Rule""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
38,,,ir.autovacuum,id,base,"{""en_US"": ""Automatic Vacuum""}", Helper model to the ``@api.autovacuum`` method decorator. ,f,,,f,f,f,,,,
40,,,ir.fields.converter,id,base,"{""en_US"": ""Fields Converter""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
42,,,ir.qweb.field,id,base,"{""en_US"": ""Qweb Field""}"," Used to convert a t-field specification into an output HTML field.

    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:

    * converts the record value to html using :meth:`~.record_to_html`
    * generates the metadata attributes (``data-oe-``) to set on the root
      result node
    * generates the root result node itself through :meth:`~.render_element`
    ",f,,,f,f,f,,,,
43,,,ir.qweb.field.integer,id,base,"{""en_US"": ""Qweb Field Integer""}"," Used to convert a t-field specification into an output HTML field.

    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:

    * converts the record value to html using :meth:`~.record_to_html`
    * generates the metadata attributes (``data-oe-``) to set on the root
      result node
    * generates the root result node itself through :meth:`~.render_element`
    ",f,,,f,f,f,,,,
44,,,ir.qweb.field.float,id,base,"{""en_US"": ""Qweb Field Float""}"," Used to convert a t-field specification into an output HTML field.

    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:

    * converts the record value to html using :meth:`~.record_to_html`
    * generates the metadata attributes (``data-oe-``) to set on the root
      result node
    * generates the root result node itself through :meth:`~.render_element`
    ",f,,,f,f,f,,,,
46,,,ir.qweb.field.datetime,id,base,"{""en_US"": ""Qweb Field Datetime""}"," Used to convert a t-field specification into an output HTML field.

    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:

    * converts the record value to html using :meth:`~.record_to_html`
    * generates the metadata attributes (``data-oe-``) to set on the root
      result node
    * generates the root result node itself through :meth:`~.render_element`
    ",f,,,f,f,f,,,,
47,,,ir.qweb.field.text,id,base,"{""en_US"": ""Qweb Field Text""}"," Used to convert a t-field specification into an output HTML field.

    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:

    * converts the record value to html using :meth:`~.record_to_html`
    * generates the metadata attributes (``data-oe-``) to set on the root
      result node
    * generates the root result node itself through :meth:`~.render_element`
    ",f,,,f,f,f,,,,
48,,,ir.qweb.field.selection,id,base,"{""en_US"": ""Qweb Field Selection""}"," Used to convert a t-field specification into an output HTML field.

    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:

    * converts the record value to html using :meth:`~.record_to_html`
    * generates the metadata attributes (``data-oe-``) to set on the root
      result node
    * generates the root result node itself through :meth:`~.render_element`
    ",f,,,f,f,f,,,,
49,,,ir.qweb.field.many2one,id,base,"{""en_US"": ""Qweb Field Many to One""}"," Used to convert a t-field specification into an output HTML field.

    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:

    * converts the record value to html using :meth:`~.record_to_html`
    * generates the metadata attributes (``data-oe-``) to set on the root
      result node
    * generates the root result node itself through :meth:`~.render_element`
    ",f,,,f,f,f,,,,
50,,,ir.qweb.field.many2many,id,base,"{""en_US"": ""Qweb field many2many""}"," Used to convert a t-field specification into an output HTML field.

    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:

    * converts the record value to html using :meth:`~.record_to_html`
    * generates the metadata attributes (``data-oe-``) to set on the root
      result node
    * generates the root result node itself through :meth:`~.render_element`
    ",f,,,f,f,f,,,,
51,,,ir.qweb.field.html,id,base,"{""en_US"": ""Qweb Field HTML""}"," Used to convert a t-field specification into an output HTML field.

    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:

    * converts the record value to html using :meth:`~.record_to_html`
    * generates the metadata attributes (``data-oe-``) to set on the root
      result node
    * generates the root result node itself through :meth:`~.render_element`
    ",f,,,f,f,f,,,,
52,,,ir.qweb.field.image,id,base,"{""en_US"": ""Qweb Field Image""}","
    Widget options:

    ``class``
        set as attribute on the generated <img> tag
    ",f,,,f,f,f,,,,
53,,,ir.qweb.field.image_url,id,base,"{""en_US"": ""Qweb Field Image""}"," ``image_url`` widget rendering, inserts an image tag in the
    document.
    ",f,,,f,f,f,,,,
74,,,ir.profile,"session desc, id desc",base,"{""en_US"": ""Profiling results""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
54,,,ir.qweb.field.monetary,id,base,"{""en_US"": ""Qweb Field Monetary""}"," ``monetary`` converter, has a mandatory option
    ``display_currency`` only if field is not of type Monetary.
    Otherwise, if we are in presence of a monetary field, the field definition must
    have a currency_field attribute set.

    The currency is used for formatting *and rounding* of the float value. It
    is assumed that the linked res_currency has a non-empty rounding value and
    res.currency's ``round`` method is used to perform rounding.

    .. note:: the monetary converter internally adds the qweb context to its
              options mapping, so that the context is available to callees.
              It's set under the ``_values`` key.
    ",f,,,f,f,f,,,,
55,,,ir.qweb.field.float_time,id,base,"{""en_US"": ""Qweb Field Float Time""}"," ``float_time`` converter, to display integral or fractional values as
    human-readable time spans (e.g. 1.5 as ""01:30"").

    Can be used on any numerical field.
    ",f,,,f,f,f,,,,
56,,,ir.qweb.field.time,id,base,"{""en_US"": ""QWeb Field Time""}"," ``time`` converter, to display integer or fractional value as
    human-readable time (e.g. 1.5 as ""1:30 AM""). The unit of this value
    is in hours.

    Can be used on any numerical field between: 0 <= value < 24
    ",f,,,f,f,f,,,,
57,,,ir.qweb.field.duration,id,base,"{""en_US"": ""Qweb Field Duration""}"," ``duration`` converter, to display integral or fractional values as
    human-readable time spans (e.g. 1.5 as ""1 hour 30 minutes"").

    Can be used on any numerical field.

    Has an option ``unit`` which can be one of ``second``, ``minute``,
    ``hour``, ``day``, ``week`` or ``year``, used to interpret the numerical
    field value before converting it. By default use ``second``.

    Has an option ``round``. By default use ``second``.

    Has an option ``digital`` to display 01:00 instead of 1 hour

    Sub-second values will be ignored.
    ",f,,,f,f,f,,,,
58,,,ir.qweb.field.relative,id,base,"{""en_US"": ""Qweb Field Relative""}"," Used to convert a t-field specification into an output HTML field.

    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:

    * converts the record value to html using :meth:`~.record_to_html`
    * generates the metadata attributes (``data-oe-``) to set on the root
      result node
    * generates the root result node itself through :meth:`~.render_element`
    ",f,,,f,f,f,,,,
59,,,ir.qweb.field.barcode,id,base,"{""en_US"": ""Qweb Field Barcode""}"," ``barcode`` widget rendering, inserts a data:uri-using image tag in the
    document. May be overridden by e.g. the website module to generate links
    instead.
    ",f,,,f,f,f,,,,
60,,,ir.qweb.field.contact,id,base,"{""en_US"": ""Qweb Field Contact""}"," Used to convert a t-field specification into an output HTML field.

    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:

    * converts the record value to html using :meth:`~.record_to_html`
    * generates the metadata attributes (``data-oe-``) to set on the root
      result node
    * generates the root result node itself through :meth:`~.render_element`
    ",f,,,f,f,f,,,,
61,,,ir.qweb.field.qweb,id,base,"{""en_US"": ""Qweb Field qweb""}"," Used to convert a t-field specification into an output HTML field.

    :meth:`~.to_html` is the entry point of this conversion from QWeb, it:

    * converts the record value to html using :meth:`~.record_to_html`
    * generates the metadata attributes (``data-oe-``) to set on the root
      result node
    * generates the root result node itself through :meth:`~.render_element`
    ",f,,,f,f,f,,,,
63,,,ir.logging,id DESC,base,"{""en_US"": ""Logging""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
64,,,ir.property,id,base,"{""en_US"": ""Company Property""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
65,,,ir.module.category,name,base,"{""en_US"": ""Application""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
66,,,ir.module.module,"application desc,sequence,name",base,"{""en_US"": ""Module""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
67,,,ir.module.module.dependency,id,base,"{""en_US"": ""Module dependency""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
68,,,ir.module.module.exclusion,id,base,"{""en_US"": ""Module exclusion""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
69,,,ir.demo,id,base,"{""en_US"": ""Demo""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
70,,,ir.demo_failure,id,base,"{""en_US"": ""Demo failure""}"," Stores modules for which we could not install demo data
    ",t,,,f,f,f,,,,
71,,,ir.demo_failure.wizard,id,base,"{""en_US"": ""Demo Failure wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
72,,,report.layout,sequence,base,"{""en_US"": ""Report Layout""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
73,,,report.paperformat,id,base,"{""en_US"": ""Paper Format Config""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
75,,,base.enable.profiling.wizard,id,base,"{""en_US"": ""Enable profiling for some time""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
76,,,image.mixin,id,base,"{""en_US"": ""Image Mixin""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
77,,,avatar.mixin,id,base,"{""en_US"": ""Avatar Mixin""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
78,,,res.country,name,base,"{""en_US"": ""Country""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
79,,,res.country.group,id,base,"{""en_US"": ""Country Group""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
80,,,res.country.state,code,base,"{""en_US"": ""Country state""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
81,,,res.lang,"active desc,name",base,"{""en_US"": ""Languages""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
82,,,format.address.mixin,id,base,"{""en_US"": ""Address Format""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
83,,,res.partner.category,name,base,"{""en_US"": ""Partner Tags""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
84,,,res.partner.title,name,base,"{""en_US"": ""Partner Title""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
86,,,res.partner.industry,name,base,"{""en_US"": ""Industry""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
87,,,res.bank,name,base,"{""en_US"": ""Bank""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
89,,,res.config,id,base,"{""en_US"": ""Config""}"," Base classes for new-style configuration items

    Configuration items should inherit from this class, implement
    the execute method (and optionally the cancel one) and have
    their view inherit from the related res_config_view_base view.
    ",t,,,f,f,f,,,,
90,,,res.config.installer,id,base,"{""en_US"": ""Config Installer""}"," New-style configuration base specialized for addons selection
    and installation.

    Basic usage
    -----------

    Subclasses can simply define a number of boolean fields. The field names
    should be the names of the addons to install (when selected). Upon action
    execution, selected boolean fields (and those only) will be interpreted as
    addons to install, and batch-installed.

    Additional addons
    -----------------

    It is also possible to require the installation of an additional
    addon set when a specific preset of addons has been marked for
    installation (in the basic usage only, additionals can't depend on
    one another).

    These additionals are defined through the ``_install_if``
    property. This property is a mapping of a collection of addons (by
    name) to a collection of addons (by name) [#]_, and if all the *key*
    addons are selected for installation, then the *value* ones will
    be selected as well. For example::

        _install_if = {
            ('sale','crm'): ['sale_crm'],
        }

    This will install the ``sale_crm`` addon if and only if both the
    ``sale`` and ``crm`` addons are selected for installation.

    You can define as many additionals as you wish, and additionals
    can overlap in key and value. For instance::

        _install_if = {
            ('sale','crm'): ['sale_crm'],
            ('sale','project'): ['sale_service'],
        }

    will install both ``sale_crm`` and ``sale_service`` if all of
    ``sale``, ``crm`` and ``project`` are selected for installation.

    Hook methods
    ------------

    Subclasses might also need to express dependencies more complex
    than that provided by additionals. In this case, it's possible to
    define methods of the form ``_if_%(name)s`` where ``name`` is the
    name of a boolean field. If the field is selected, then the
    corresponding module will be marked for installation *and* the
    hook method will be executed.

    Hook methods take the usual set of parameters (cr, uid, ids,
    context) and can return a collection of additional addons to
    install (if they return anything, otherwise they should not return
    anything, though returning any ""falsy"" value such as None or an
    empty collection will have the same effect).

    Complete control
    ----------------

    The last hook is to simply overload the ``modules_to_install``
    method, which implements all the mechanisms above. This method
    takes the usual set of parameters (cr, uid, ids, context) and
    returns a ``set`` of addons to install (addons selected by the
    above methods minus addons from the *basic* set which are already
    installed) [#]_ so an overloader can simply manipulate the ``set``
    returned by ``ResConfigInstaller.modules_to_install`` to add or
    remove addons.

    Skipping the installer
    ----------------------

    Unless it is removed from the view, installers have a *skip*
    button which invokes ``action_skip`` (and the ``cancel`` hook from
    ``res.config``). Hooks and additionals *are not run* when skipping
    installation, even for already installed addons.

    Again, setup your hooks accordingly.

    .. [#] note that since a mapping key needs to be hashable, it's
           possible to use a tuple or a frozenset, but not a list or a
           regular set

    .. [#] because the already-installed modules are only pruned at
           the very end of ``modules_to_install``, additionals and
           hooks depending on them *are guaranteed to execute*. Setup
           your hooks accordingly.
    ",t,,,f,f,f,,,,
92,,,res.currency,"active desc, name",base,"{""en_US"": ""Currency""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
93,,,res.currency.rate,name desc,base,"{""en_US"": ""Currency Rate""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
96,,,res.users.log,id desc,base,"{""en_US"": ""Users Log""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
98,,,res.users.identitycheck,id,base,"{""en_US"": ""Password Check Wizard""}"," Wizard used to re-check the user's credentials (password) and eventually
    revoke access to his account to every device he has an active session on.

    Might be useful before the more security-sensitive operations, users might be
    leaving their computer unlocked & unattended. Re-checking credentials mitigates
    some of the risk of a third party using such an unattended device to manipulate
    the account.
    ",t,,,f,f,f,,,,
99,,,change.password.wizard,id,base,"{""en_US"": ""Change Password Wizard""}", A wizard to manage the change of users' passwords. ,t,,,f,f,f,,,,
100,,,change.password.user,id,base,"{""en_US"": ""User, Change Password Wizard""}", A model to configure users in the change password wizard. ,t,,,f,f,f,,,,
101,,,change.password.own,id,base,"{""en_US"": ""User, change own password wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
102,,,res.users.apikeys,id,base,"{""en_US"": ""Users API Keys""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
103,,,res.users.apikeys.description,id,base,"{""en_US"": ""API Key Description""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
106,,,res.users.deletion,id,base,"{""en_US"": ""Users Deletion Request""}","User deletion requests.

    Those requests are logged in a different model to keep a trace of this action and the
    deletion is done in a CRON. Indeed, removing a user can be a heavy operation on
    large database (because of create_uid, write_uid on each model, which are not always
    indexed). This model just remove the users added in the deletion queue, remaining code
    must deal with other consideration (archiving, blacklist email...).
    ",f,,,f,f,f,,,,
107,,,decimal.precision,id,base,"{""en_US"": ""Decimal Precision""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
108,,,report.base.report_irmodulereference,id,base,"{""en_US"": ""Module Reference Report (base)""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
109,,,base.module.update,id,base,"{""en_US"": ""Update Module""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
110,,,base.language.install,id,base,"{""en_US"": ""Install Language""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
111,,,base.language.import,id,base,"{""en_US"": ""Language Import""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
112,,,base.module.upgrade,id,base,"{""en_US"": ""Upgrade Module""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
114,,,base.language.export,id,base,"{""en_US"": ""Language Export""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
115,,,base.partner.merge.line,min_id asc,base,"{""en_US"": ""Merge Partner Line""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
118,,,base.document.layout,id,base,"{""en_US"": ""Company Document Layout""}","
    Customise the company document layout and display a live preview
    ",t,,,f,f,f,,,,
119,,,auth_totp.device,id,base,"{""en_US"": ""Authentication Device""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
120,,,auth_totp.wizard,id,base,"{""en_US"": ""2-Factor Setup Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
121,,,base_import.mapping,id,base,"{""en_US"": ""Base Import Mapping""}"," mapping of previous column:field selections

    This is useful when repeatedly importing from a third-party
    system: column names generated by the external system may
    not match Odoo's field names or labels. This model is used
    to save the mapping between column names and fields so that
    next time a user imports from the same third-party systems
    we can automatically match the columns to the correct field
    without them having to re-enter the mapping every single
    time.
    ",f,,,f,f,f,,,,
147,,,utm.tag,name,base,"{""en_US"": ""UTM Tag""}","Model of categories of utm campaigns, i.e. marketing, newsletter, ...",f,,,f,f,f,,,,
122,,,base_import.import,id,base,"{""en_US"": ""Base Import""}","
    This model is used to prepare the loading of data coming from a user file.

    Here is the process that is followed:

    #. The user selects a file to import.
    #. File parsing and mapping suggestion (see ""parse_preview"" method)

       #. Extract the current model's importable fields tree (see :meth:`get_fields_tree`).
       #. Read the file (see :meth:`_read_file`) and extract header names and file
          length (used for batch import).
       #. Extract headers types from the data preview (10 first line of the file)
          (see :meth:`_extract_headers_types`).
       #. Try to find for each header a field to map with (see :meth:`_get_mapping_suggestions`)

          - First check the previously saved mappings between the header name
            and one of the model's fields.
          - If no mapping found, try an exact match comparison using fields
            technical names, labels and user language translated labels.
          - If nothing found, try a fuzzy match using word distance between
            header name and fields tachnical names, labels and user language
            translated labels. Keep only the closest match.

       #. Prepare examples for each columns using the first non null value from each column.
       #. Send the info back to the UI where the user can modify the suggested mapping.
    #. Execute the import: There are two import mode with uses the same process. (see :meth:`execute_import`)

       #. Test import: Try to import but rollback the transaction. This allows
          the check errors during the import process and allow the user to
          choose import options for the different encountered errors.
       #. Real import: Try to import the file using the configured mapping and
          the eventual ""error mapping options"". If import encounters blocking
          errors, the transaction is rollbacked and the user is allowed to
          choose import options for the different errors.

          - Get file data and fields to import into (see :meth:`_convert_import_data`).
          - Parse date, float and binary data (see :meth:`_parse_import_data`).
          - Handle multiple mapping -> concatenate char/text/many2many columns
            mapped on the same field (see :meth:`_handle_multi_mapping`).
          - Handle fallback values for boolean and selection fields, in case
            input data does not match any allowed values (see :meth:`_handle_fallback_values`).
          - Load data (see ir.model ""load"" method).
          - Rollback transaction if test mode or if encountered error.
          - Save mapping if any import is successful to ease later mapping suggestions.
          - Return import result to the UI (success or errors if any).
    ",t,,,f,f,f,,,,
124,,,bus.bus,id,base,"{""en_US"": ""Communication Bus""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
127,,,web_tour.tour,id,base,"{""en_US"": ""Tours""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
128,,,iap.account,id,base,"{""en_US"": ""IAP Account""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
129,,,iap.account.info,id,base,"{""en_US"": ""IAP Account Info""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
130,,,iap.enrich.api,id,base,"{""en_US"": ""IAP Lead Enrichment API""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
132,,,html.field.history.mixin,id,base,"{""en_US"": ""Field html History""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
133,,,web_editor.assets,id,base,"{""en_US"": ""Assets Utils""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
134,,,web_editor.converter.test,id,base,"{""en_US"": ""Web Editor Converter Test""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
135,,,web_editor.converter.test.sub,id,base,"{""en_US"": ""Web Editor Converter Subtest""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
136,,,resource.calendar,id,base,"{""en_US"": ""Resource Working Time""}"," Calendar model for a resource. It has

     - attendance_ids: list of resource.calendar.attendance that are a working
                       interval in a given weekday.
     - leave_ids: list of leaves linked to this calendar. A leave can be general
                  or linked to a specific resource, depending on its resource_id.

    All methods in this class use intervals. An interval is a tuple holding
    (begin_datetime, end_datetime). A list of intervals is therefore a list of
    tuples, holding several intervals of work or leaves. ",f,,,f,f,f,,,,
137,,,resource.calendar.attendance,"sequence, week_type, dayofweek, hour_from",base,"{""en_US"": ""Work Detail""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
138,,,resource.calendar.leaves,date_from,base,"{""en_US"": ""Resource Time Off Detail""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
139,,,resource.mixin,id,base,"{""en_US"": ""Resource Mixin""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
140,,,resource.resource,name,base,"{""en_US"": ""Resources""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
141,,,utm.campaign,id,base,"{""en_US"": ""UTM Campaign""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
142,,,utm.medium,name,base,"{""en_US"": ""UTM Medium""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
144,,,utm.source,id,base,"{""en_US"": ""UTM Source""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
145,,,utm.source.mixin,id,base,"{""en_US"": ""UTM Source Mixin""}","Mixin responsible of generating the name of the source based on the content
    (field defined by _rec_name) of the record (mailing, social post,...).
    ",f,,,f,f,f,,,,
146,,,utm.stage,sequence,base,"{""en_US"": ""Campaign Stage""}",Stage for utm campaigns.,f,,,f,f,f,,,,
344,,,base.module.install.request,id,base,"{""en_US"": ""Module Activation Request""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
345,,,base.module.install.review,id,base,"{""en_US"": ""Module Activation Review""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
346,,,google.gmail.mixin,id,base,"{""en_US"": ""Google Gmail Mixin""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
347,,,mail.bot,id,base,"{""en_US"": ""Mail Bot""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
348,,,phone.blacklist,id,base,"{""en_US"": ""Phone Blacklist""}", Blacklist of phone numbers. Used to avoid sending unwanted messages to people. ,f,,,t,f,f,,,,
349,,,mail.thread.phone,id,base,"{""en_US"": ""Phone Blacklist Mixin""}"," Purpose of this mixin is to offer two services

      * compute a sanitized phone number based on _phone_get_number_fields.
        It takes first sanitized value, trying each field returned by the
        method (see ``BaseModel._phone_get_number_fields()´´ for more details
        about the usage of this method);
      * compute blacklist state of records. It is based on phone.blacklist
        model and give an easy-to-use field and API to manipulate blacklisted
        records;

    Main API methods

      * ``_phone_set_blacklisted``: set recordset as blacklisted;
      * ``_phone_reset_blacklisted``: reactivate recordset (even if not blacklisted
        this method can be called safely);
    ",f,,,t,f,f,,,,
350,,,phone.blacklist.remove,id,base,"{""en_US"": ""Remove phone from blacklist""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
351,,,privacy.log,id,base,"{""en_US"": ""Privacy Log""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
352,,,privacy.lookup.wizard,id,base,"{""en_US"": ""Privacy Lookup Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
353,,,privacy.lookup.wizard.line,id,base,"{""en_US"": ""Privacy Lookup Wizard Line""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
354,,,hr.contract.type,sequence,base,"{""en_US"": ""Contract Type""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
355,,,hr.employee.base,name,base,"{""en_US"": ""Basic Employee""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
356,,,hr.employee,name,base,"{""en_US"": ""Employee""}","
    NB: Any field only available on the model hr.employee (i.e. not on the
    hr.employee.public model) should have `groups=""hr.group_hr_user""` on its
    definition to avoid being prefetched when the user hasn't access to the
    hr.employee model. Indeed, the prefetch loads the data for all the fields
    that are available according to the group defined on them.
    ",f,,,t,t,f,,,,
357,,,hr.employee.category,id,base,"{""en_US"": ""Employee Category""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
358,,,hr.employee.public,name,base,"{""en_US"": ""Public Employee""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
359,,,hr.department,name,base,"{""en_US"": ""Department""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
360,,,hr.departure.reason,sequence,base,"{""en_US"": ""Departure Reason""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
361,,,hr.job,sequence,base,"{""en_US"": ""Job Position""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
362,,,hr.work.location,name,base,"{""en_US"": ""Work Location""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
363,,,hr.departure.wizard,id,base,"{""en_US"": ""Departure Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
364,,,iap.autocomplete.api,id,base,"{""en_US"": ""IAP Partner Autocomplete API""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
365,,,res.partner.autocomplete.sync,id,base,"{""en_US"": ""Partner Autocomplete Sync""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
366,,,portal.mixin,id,base,"{""en_US"": ""Portal Mixin""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
367,,,portal.share,id,base,"{""en_US"": ""Portal Sharing""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
368,,,portal.wizard,id,base,"{""en_US"": ""Grant Portal Access""}","
        A wizard to manage the creation/removal of portal users.
    ",t,,,f,f,f,,,,
369,,,portal.wizard.user,id,base,"{""en_US"": ""Portal User Config""}","
        A model to configure users in the portal wizard.
    ",t,,,f,f,f,,,,
176,,,mail.message,id desc,base,"{""en_US"": ""Message""}"," Override MailMessage class in order to add a new type: SMS messages.
    Those messages comes with their own notification method, using SMS
    gateway. ",f,,,f,f,f,,,,
635,,,sale.report,date desc,base,"{""en_US"": ""Sales Analysis Report""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
373,,,sms.sms,id DESC,base,"{""en_US"": ""Outgoing SMS""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
374,,,sms.template,id,base,"{""en_US"": ""SMS Templates""}",Templates for sending SMS,f,,,f,f,f,,,,
375,,,sms.tracker,id,base,"{""en_US"": ""Link SMS to mailing/sms tracking models""}","Relationship between a sent SMS and tracking records such as notifications and traces.

    This model acts as an extension of a `mail.notification` or a `mailing.trace` and allows to
    update those based on the SMS provider responses both at sending and when later receiving
    sent/delivery reports (see `SmsController`).
    SMS trackers are supposed to be created manually when necessary, and tied to their related
    SMS through the SMS UUID field. (They are not tied to the SMS records directly as those can
    be deleted when sent).

    Note: Only admins/system user should need to access (a fortiori modify) these technical
      records so no ""sudo"" is used nor should be required here.
    ",f,,,f,f,f,,,,
376,,,sms.composer,id,base,"{""en_US"": ""Send SMS Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
377,,,sms.resend.recipient,id,base,"{""en_US"": ""Resend Notification""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
378,,,sms.resend,id,base,"{""en_US"": ""SMS Resend""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
379,,,sms.template.preview,id,base,"{""en_US"": ""SMS Template Preview""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
380,,,sms.template.reset,id,base,"{""en_US"": ""SMS Template Reset""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
381,,,snailmail.letter,id,base,"{""en_US"": ""Snailmail Letter""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
382,,,snailmail.letter.format.error,id,base,"{""en_US"": ""Format Error Sending a Snailmail Letter""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
383,,,snailmail.letter.missing.required.fields,id,base,"{""en_US"": ""Update address of partner""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
384,,,digest.digest,id,base,"{""en_US"": ""Digest""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
474,,,mailing.subscription.optout,"sequence ASC, create_date DESC, id DESC",base,"{""en_US"": ""Mailing Subscription Reason""}", Reason for opting out of mailing lists or for blacklisting. ,f,,,f,f,f,,,,
636,,,sale.mass.cancel.orders,id,base,"{""en_US"": ""Cancel multiple quotations""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
385,,,digest.tip,sequence,base,"{""en_US"": ""Digest Tips""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
386,,,hr.resume.line,"line_type_id, date_end desc, date_start desc",base,"{""en_US"": ""Resume line of an employee""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
387,,,hr.resume.line.type,sequence,base,"{""en_US"": ""Type of a resume line""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
388,,,hr.skill,"sequence, name",base,"{""en_US"": ""Skill""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
389,,,hr.employee.skill,"skill_type_id, skill_level_id",base,"{""en_US"": ""Skill level for an employee""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
390,,,hr.employee.skill.log,"employee_id,date",base,"{""en_US"": ""Skills History""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
391,,,hr.skill.level,level_progress desc,base,"{""en_US"": ""Skill Level""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
392,,,hr.skill.type,name,base,"{""en_US"": ""Skill Type""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
393,,,report.hr_skills.report_employee_cv,id,base,"{""en_US"": ""Employee Resume""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
394,,,hr.employee.skill.report,"employee_id, level_progress desc",base,"{""en_US"": ""Employee Skills Report""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
395,,,hr.employee.cv.wizard,id,base,"{""en_US"": ""Print Resume""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
396,,,spreadsheet.mixin,id,base,"{""en_US"": ""Spreadsheet mixin""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
397,,,spreadsheet.dashboard.group,sequence,base,"{""en_US"": ""Group of dashboards""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
398,,,spreadsheet.dashboard,sequence,base,"{""en_US"": ""Spreadsheet Dashboard""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
399,,,spreadsheet.dashboard.share,id,base,"{""en_US"": ""Copy of a shared dashboard""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
402,,,website.seo.metadata,id,base,"{""en_US"": ""SEO metadata""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
403,,,website.cover_properties.mixin,id,base,"{""en_US"": ""Cover Properties Website Mixin""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
404,,,website.multi.mixin,id,base,"{""en_US"": ""Multi Website Mixin""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
405,,,website.published.mixin,id,base,"{""en_US"": ""Website Published Mixin""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
406,,,website.published.multi.mixin,id,base,"{""en_US"": ""Multi Website Published Mixin""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
407,,,website.searchable.mixin,id,base,"{""en_US"": ""Website Searchable Mixin""}",Mixin to be inherited by all models that need to searchable through website,f,,,f,f,f,,,,
408,,,website,"sequence, id",base,"{""en_US"": ""Website""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
409,,,website.menu,"sequence, id",base,"{""en_US"": ""Website Menu""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
410,,,website.page,website_id,base,"{""en_US"": ""Page""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
495,,,project.tags,name,base,"{""en_US"": ""Project Tags""}", Tags of project's tasks ,f,,,f,f,f,,,,
411,,,website.route,path,base,"{""en_US"": ""All Website Route""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
412,,,website.rewrite,id,base,"{""en_US"": ""Website rewrite""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
413,,,theme.ir.asset,id,base,"{""en_US"": ""Theme Asset""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
414,,,theme.ir.ui.view,id,base,"{""en_US"": ""Theme UI View""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
415,,,theme.ir.attachment,id,base,"{""en_US"": ""Theme Attachments""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
416,,,theme.website.menu,id,base,"{""en_US"": ""Website Theme Menu""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
417,,,theme.website.page,id,base,"{""en_US"": ""Website Theme Page""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
418,,,theme.utils,id,base,"{""en_US"": ""Theme Utils""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
419,,,website.configurator.feature,sequence,base,"{""en_US"": ""Website Configurator Feature""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
421,,,website.snippet.filter,name ASC,base,"{""en_US"": ""Website Snippet Filter""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
422,,,website.track,visit_datetime DESC,base,"{""en_US"": ""Visited Pages""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
423,,,website.visitor,id DESC,base,"{""en_US"": ""Website Visitor""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
424,,,website.controller.page,website_id,base,"{""en_US"": ""Model Page""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
425,,,website.robots,id,base,"{""en_US"": ""Robots.txt Editor""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
426,,,board.board,id,base,"{""en_US"": ""Board""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
427,,,op.batch,id,base,"{""en_US"": ""OpenEduCat Batch""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
428,,,op.category,id,base,"{""en_US"": ""OpenEduCat Category""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
429,,,op.course,id,base,"{""en_US"": ""OpenEduCat Course""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
430,,,op.faculty,id,base,"{""en_US"": ""OpenEduCat Faculty""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,t,f,,,,
431,,,op.department,id,base,"{""en_US"": ""OpenEduCat Department""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
432,,,op.student.course,id,base,"{""en_US"": ""Student Course Details""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
433,,,op.student,id,base,"{""en_US"": ""Student""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,t,f,,,,
434,,,op.subject,id,base,"{""en_US"": ""Subject""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
435,,,op.subject.registration,id,base,"{""en_US"": ""Subject Registration Details""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
436,,,op.academic.term,id,base,"{""en_US"": ""Academic Term""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
437,,,op.academic.year,id,base,"{""en_US"": ""Academic Year""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
438,,,wizard.op.faculty.employee,id,base,"{""en_US"": ""Create Employee and User of Faculty""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
439,,,wizard.op.faculty,id,base,"{""en_US"": ""Create User for selected Faculty(s)""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
440,,,wizard.op.student,id,base,"{""en_US"": ""Create User for selected Student(s)""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
441,,,uom.category,id,base,"{""en_US"": ""Product UoM Categories""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
442,,,uom.uom,"factor DESC, id",base,"{""en_US"": ""Product Unit of Measure""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
443,,,account.analytic.plan,"sequence asc, id",base,"{""en_US"": ""Analytic Plans""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
444,,,account.analytic.applicability,id,base,"{""en_US"": ""Analytic Plan's Applicabilities""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
445,,,account.analytic.account,"plan_id, name asc",base,"{""en_US"": ""Analytic Account""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
446,,,account.analytic.line,"date desc, id desc",base,"{""en_US"": ""Analytic Line""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
447,,,analytic.mixin,id,base,"{""en_US"": ""Analytic Mixin""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
448,,,account.analytic.distribution.model,id desc,base,"{""en_US"": ""Analytic Distribution Model""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
449,,,gamification.badge,id,base,"{""en_US"": ""Gamification Badge""}",Badge object that users can send and receive,f,,,t,f,f,,,,
450,,,gamification.badge.user,create_date desc,base,"{""en_US"": ""Gamification User Badge""}",User having received a badge,f,,,f,f,f,,,,
451,,,gamification.challenge,"end_date, start_date, name, id",base,"{""en_US"": ""Gamification Challenge""}","Gamification challenge

    Set of predifined objectives assigned to people with rules for recurrence and
    rewards

    If 'user_ids' is defined and 'period' is different than 'one', the set will
    be assigned to the users for each period (eg: every 1st of each month if
    'monthly' is selected)
    ",f,,,t,f,f,,,,
452,,,gamification.challenge.line,"sequence, id",base,"{""en_US"": ""Gamification generic goal for challenge""}","Gamification challenge line

    Predefined goal for 'gamification_challenge'
    These are generic list of goals with only the target goal defined
    Should only be created for the gamification.challenge object
    ",f,,,f,f,f,,,,
453,,,gamification.goal,"start_date desc, end_date desc, definition_id, id",base,"{""en_US"": ""Gamification Goal""}","Goal instance for a user

    An individual goal for a user on a specified time period",f,,,f,f,f,,,,
638,,,sale.payment.provider.onboarding.wizard,id,base,"{""en_US"": ""Sale Payment provider onboarding wizard""}", Override for the sale quotation onboarding panel. ,t,,,f,f,f,,,,
454,,,gamification.goal.definition,id,base,"{""en_US"": ""Gamification Goal Definition""}","Goal definition

    A goal definition contains the way to evaluate an objective
    Each module wanting to be able to set goals to the users needs to create
    a new gamification_goal_definition
    ",f,,,f,f,f,,,,
455,,,gamification.karma.rank,karma_min,base,"{""en_US"": ""Rank based on karma""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
456,,,gamification.karma.tracking,"tracking_date desc, id desc",base,"{""en_US"": ""Track Karma Changes""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
457,,,gamification.goal.wizard,id,base,"{""en_US"": ""Gamification Goal Wizard""}",Wizard to update a manual goal,t,,,f,f,f,,,,
458,,,gamification.badge.user.wizard,id,base,"{""en_US"": ""Gamification User Badge Wizard""}", Wizard allowing to grant a badge to a user,t,,,f,f,f,,,,
459,,,link.tracker,count DESC,base,"{""en_US"": ""Link Tracker""}"," Link trackers allow users to wrap any URL into a short URL that can be
    tracked by Odoo. Clicks are counter on each link. A tracker is linked to
    UTMs allowing to analyze marketing actions.

    This model is also used in mass_mailing where each link in html body is
    automatically converted into a short link that is tracked and integrates
    UTMs. ",f,,,f,f,f,,,,
460,,,link.tracker.code,id,base,"{""en_US"": ""Link Tracker Code""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
461,,,link.tracker.click,id,base,"{""en_US"": ""Link Tracker Click""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
462,,,rating.rating,"write_date desc, id desc",base,"{""en_US"": ""Rating""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
463,,,rating.mixin,id,base,"{""en_US"": ""Rating Mixin""}",This mixin adds rating statistics to mail.thread that already support ratings.,f,,,t,f,f,,,,
464,,,rating.parent.mixin,id,base,"{""en_US"": ""Rating Parent Mixin""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
465,,,survey.survey,create_date DESC,base,"{""en_US"": ""Survey""}","This model defines additional actions on the 'survey.survey' model that
       can be used to load a survey sample. The model defines a sample for each
       survey type:
       (1) survey: A feedback form
       (2) assessment: A certification
       (3) live_session: A live presentation
       (4) custom: An empty survey
    ",f,,,t,t,f,,,,
466,,,survey.question,"sequence,id",base,"{""en_US"": ""Survey Question""}"," Questions that will be asked in a survey.

        Each question can have one of more suggested answers (eg. in case of
        multi-answer checkboxes, radio buttons...).

        Technical note:

        survey.question is also the model used for the survey's pages (with the ""is_page"" field set to True).

        A page corresponds to a ""section"" in the interface, and the fact that it separates the survey in
        actual pages in the interface depends on the ""questions_layout"" parameter on the survey.survey model.
        Pages are also used when randomizing questions. The randomization can happen within a ""page"".

        Using the same model for questions and pages allows to put all the pages and questions together in a o2m field
        (see survey.survey.question_and_page_ids) on the view side and easily reorganize your survey by dragging the
        items around.

        It also removes on level of encoding by directly having 'Add a page' and 'Add a question'
        links on the tree view of questions, enabling a faster encoding.

        However, this has the downside of making the code reading a little bit more complicated.
        Efforts were made at the model level to create computed fields so that the use of these models
        still seems somewhat logical. That means:
        - A survey still has ""page_ids"" (question_and_page_ids filtered on is_page = True)
        - These ""page_ids"" still have question_ids (questions located between this page and the next)
        - These ""question_ids"" still have a ""page_id""

        That makes the use and display of these information at view and controller levels easier to understand.
    ",f,,,f,f,f,,,,
467,,,survey.question.answer,"question_id, sequence, id",base,"{""en_US"": ""Survey Label""}"," A preconfigured answer for a question. This model stores values used
    for

      * simple choice, multiple choice: proposed values for the selection /
        radio;
      * matrix: row and column values;

    ",f,,,f,f,f,,,,
468,,,survey.user_input,create_date desc,base,"{""en_US"": ""Survey User Input""}", Metadata for a set of one user's answers to a particular survey ,f,,,t,t,f,,,,
469,,,survey.user_input.line,"question_sequence, id",base,"{""en_US"": ""Survey User Input Line""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
470,,,survey.invite,id,base,"{""en_US"": ""Survey Invitation Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
471,,,mailing.subscription,"list_id DESC, contact_id DESC",base,"{""en_US"": ""Mailing List Subscription""}"," Intermediate model between mass mailing list and mass mailing contact
        Indicates if a contact is opted out for a particular list
    ",f,,,f,f,f,,,,
639,,,sale.advance.payment.inv,id,base,"{""en_US"": ""Sales Advance Payment Invoice""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
473,,,mailing.list,create_date DESC,base,"{""en_US"": ""Mailing List""}",Model of a contact list. ,f,,,f,f,f,,,,
475,,,mailing.trace,create_date DESC,base,"{""en_US"": ""Mailing Statistics""}"," MailingTrace models the statistics collected about emails. Those statistics
    are stored in a separated model and table to avoid bloating the mail_mail table
    with statistics values. This also allows to delete emails send with mass mailing
    without loosing the statistics about them.

    Note:: State management / Error codes / Failure types summary

      * trace_status
        'outgoing', 'process', 'pending', 'sent', 'opened', 'replied',
        'error', 'bounce', 'cancel'
      * failure_type
        # generic
        'unknown',
        # mass_mailing
        ""mail_email_invalid"", ""mail_smtp"", ""mail_email_missing"",
        ""mail_from_invalid"", ""mail_from_missing"",
        # mass mailing mass mode specific codes
        ""mail_bl"", ""mail_optout"", ""mail_dup""
        # mass_mailing_sms
        'sms_number_missing', 'sms_number_format', 'sms_credit', 'sms_server',
        'sms_acc', 'sms_country_not_supported', 'sms_registration_needed',
        # mass_mailing_sms mass mode specific codes
        'sms_blacklist', 'sms_duplicate', 'sms_optout',
      * cancel:
        * mail: set in _prepare_mail_values in composer, if email is blacklisted
          (mail) or in opt_out / seen list (mass_mailing) or email_to is void
          or incorrectly formatted (mass_mailing) - based on mail cancel state
        * sms: set in _prepare_mass_sms_trace_values in composer if sms is
          in cancel state; either blacklisted (sms) or in opt_out / seen list
          (sms);
        * void mail / void sms number -> error (mail_missing, sms_number_missing)
        * invalid mail / invalid sms number -> error (RECIPIENT, sms_number_format)
      * exception: set in  _postprocess_sent_message (_postprocess_iap_sent_sms)
        if mail (sms) not sent with failure type, reset if sent;
      * process: (used in sms): set in SmsTracker._update_sms_traces when held back
        (at IAP) before actual sending to the sms_service.
      * pending: (used in sms): default value for sent sms.
      * sent: set in
        * _postprocess_sent_message if mail
        * SmsTracker._update_sms_traces if sms, when delivery report is received.
      * clicked: triggered by add_click
      * opened: triggered by add_click + blank gif (mail) + gateway reply (mail)
      * replied: triggered by gateway reply (mail)
      * bounced: triggered by gateway bounce (mail) or in _prepare_mass_sms_trace_values
        if sms_number_format error when sending sms (sms)
    ",f,,,f,f,f,,,,
476,,,mailing.mailing,calendar_date DESC,base,"{""en_US"": ""Mass Mailing""}", Mass Mailing models the sending of emails to a list of recipients for a mass mailing campaign.,f,,,t,t,f,,,,
477,,,mailing.filter,create_date DESC,base,"{""en_US"": ""Mailing Favorite Filters""}"," This model stores mass mailing or marketing campaign domain as filters
    (quite similar to 'ir.filters' but dedicated to mailing apps). Frequently
    used domains can be reused easily. ",f,,,f,f,f,,,,
480,,,mailing.trace.report,id,base,"{""en_US"": ""Mass Mailing Statistics""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
481,,,mailing.contact.import,id,base,"{""en_US"": ""Mailing Contact Import""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
482,,,mailing.contact.to.list,id,base,"{""en_US"": ""Add Contacts to Mailing List""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
483,,,mailing.list.merge,id,base,"{""en_US"": ""Merge Mass Mailing List""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
484,,,mailing.mailing.test,id,base,"{""en_US"": ""Sample Mail Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
485,,,mailing.mailing.schedule.date,id,base,"{""en_US"": ""schedule a mailing""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
158,,,mail.thread.cc,id,base,"{""en_US"": ""Email CC management""}", Update MailThread to add the support of bounce management in mass mailing traces. ,f,,,t,f,f,,,,
487,,,project.project.stage,"sequence, id",base,"{""en_US"": ""Project Stage""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
488,,,project.task.recurrence,id,base,"{""en_US"": ""Task Recurrence""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
489,,,project.task.stage.personal,id,base,"{""en_US"": ""Personal Task Stage""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
679,,,base.automation,id,base,"{""en_US"": ""Automation Rule""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
491,,,project.milestone,"deadline, is_reached desc, name",base,"{""en_US"": ""Project Milestone""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
492,,,project.update,id desc,base,"{""en_US"": ""Project Update""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,t,f,,,,
493,,,project.project,"sequence, name, id",base,"{""en_US"": ""Project""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,t,f,,,,
494,,,project.task.type,"sequence, id",base,"{""en_US"": ""Task Stage""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
496,,,project.collaborator,id,base,"{""en_US"": ""Collaborators in project shared""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
498,,,report.project.task.user,"name desc, project_id",base,"{""en_US"": ""Tasks Analysis""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
499,,,project.task.burndown.chart.report,date,base,"{""en_US"": ""Burndown Chart""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
500,,,project.project.stage.delete.wizard,id,base,"{""en_US"": ""Project Stage Delete Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
501,,,project.task.type.delete.wizard,id,base,"{""en_US"": ""Project Task Stage Delete Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
502,,,project.share.wizard,id,base,"{""en_US"": ""Project Sharing""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
503,,,mail.activity.todo.create,id,base,"{""en_US"": ""Create activity and todo at the same time""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
490,,1,project.task,"priority desc, sequence, date_deadline asc, id desc",base,"{""en_US"": ""Task""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,2024-04-18 07:41:28.586933,t,t,f,5718,Create a Task,create_task,t
472,,1,mailing.contact,"name ASC, id DESC",base,"{""en_US"": ""Mailing Contact""}","Model of a contact. This model is different from the partner model
    because it holds only some basic information: name, email. The purpose is to
    be able to deal with large contact list to email without bloating the partner
    base.",f,,2024-04-18 07:41:29.207285,t,f,t,,Subscribe to Newsletter,create_mailing_contact,t
504,,,op.activity,id,base,"{""en_US"": ""Student Activity""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,t,f,,,,
505,,,op.activity.type,id,base,"{""en_US"": ""Activity Type""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
506,,,student.migrate,id,base,"{""en_US"": ""Student Migrate""}", Student Migration Wizard ,t,,,f,f,f,,,,
85,,1,res.partner,"complete_name ASC, id DESC",base,"{""en_US"": ""Contact""}", Inherits partner and adds Tasks information in the partner form ,f,,2024-04-18 07:47:35.565337,t,t,t,,Create a Customer,create_customer,t
640,,,sale.order.cancel,id,base,"{""en_US"": ""Sales Order Cancel""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
641,,,sale.order.discount,id,base,"{""en_US"": ""Discount Wizard""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
642,,,event.question,"sequence,id",base,"{""en_US"": ""Event Question""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
643,,,event.question.answer,"sequence,id",base,"{""en_US"": ""Event Question Answer""}", Contains suggested answers to a 'simple_choice' event.question. ,f,,,f,f,f,,,,
644,,,event.registration.answer,id,base,"{""en_US"": ""Event Registration Answer""}", Represents the user input answer for a single event.question ,f,,,f,f,f,,,,
645,,,website.event.menu,id,base,"{""en_US"": ""Website Event Menu""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
646,,,delivery.carrier,"sequence, id",base,"{""en_US"": ""Shipping Methods""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
647,,,delivery.price.rule,"sequence, list_price, id",base,"{""en_US"": ""Delivery Price Rules""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
687,,,op.student.fees.details,id,base,"{""en_US"": ""Student Fees Details""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
688,,,report.openeducat_fees.report_fees_analysis,id,base,"{""en_US"": ""Fees Report""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
689,,,fees.detail.report.wizard,id,base,"{""en_US"": ""Wizard For Fees Details Report""}", Admission Analysis Wizard ,t,,,f,f,f,,,,
690,,,op.admission,id DESC,base,"{""en_US"": ""Admission""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,t,f,,,,
691,,,op.admission.register,id DESC,base,"{""en_US"": ""Admission Register""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
692,,,report.openeducat_admission.report_admission_analysis,id,base,"{""en_US"": ""Admission Analysis Report""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
693,,,admission.analysis,id,base,"{""en_US"": ""Admission Analysis Wizard""}", Admission Analysis Wizard ,t,,,f,f,f,,,,
694,,,op.facility,id,base,"{""en_US"": ""Manage Facility""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
695,,,op.facility.line,id,base,"{""en_US"": ""Manage Facility Line""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
696,,,op.asset,id,base,"{""en_US"": ""Classroom Assets""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
697,,,op.classroom,id,base,"{""en_US"": ""Classroom""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
698,,,op.session,id,base,"{""en_US"": ""Sessions""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
699,,,op.timing,sequence,base,"{""en_US"": ""Period""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
700,,,report.openeducat_timetable.report_timetable_student_generate,id,base,"{""en_US"": ""Timetable Student Report""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
701,,,report.openeducat_timetable.report_timetable_teacher_generate,id,base,"{""en_US"": ""Timetable Teacher Report""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
702,,,generate.time.table,id,base,"{""en_US"": ""Generate Sessions""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
703,,,gen.time.table.line,id,base,"{""en_US"": ""Generate Time Table Lines""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
704,,,session.confirmation,id,base,"{""en_US"": ""Wizard for Multiple Session Confirmation""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
705,,,time.table.report,id,base,"{""en_US"": ""Generate Time Table Report""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
706,,,op.attendance.line,attendance_date desc,base,"{""en_US"": ""Attendance Lines""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
707,,,op.attendance.register,id DESC,base,"{""en_US"": ""Attendance Register""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
708,,,op.attendance.sheet,attendance_date desc,base,"{""en_US"": ""Attendance Sheet""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
709,,,op.attendance.type,id,base,"{""en_US"": ""Attendance Type""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
710,,,report.openeducat_attendance.student_attendance_report,id,base,"{""en_US"": ""Attendance Report""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
711,,,student.attendance,id,base,"{""en_US"": ""Student Attendance""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
712,,,op.exam,id,base,"{""en_US"": ""Exam""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
713,,,op.exam.attendees,id,base,"{""en_US"": ""Exam Attendees""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
714,,,op.exam.room,id,base,"{""en_US"": ""Exam Room""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
715,,,op.exam.session,id,base,"{""en_US"": ""Exam Session""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
716,,,op.exam.type,id,base,"{""en_US"": ""Exam Type""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
717,,,op.grade.configuration,id,base,"{""en_US"": ""Grade Configuration""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
718,,,op.marksheet.line,id,base,"{""en_US"": ""Marksheet Line""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
719,,,op.marksheet.register,id,base,"{""en_US"": ""Marksheet Register""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
721,,,op.result.line,id,base,"{""en_US"": ""Result Line""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
722,,,op.result.template,id,base,"{""en_US"": ""Result Template""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
723,,,report.openeducat_exam.report_ticket,id,base,"{""en_US"": ""Exam Ticket Report""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
724,,,report.openeducat_exam.report_marksheet_report,id,base,"{""en_US"": ""Exam Marksheet Report""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
725,,,op.held.exam,id,base,"{""en_US"": ""Held Exam""}"," Model super-class for transient records, meant to be temporarily
    persistent, and regularly vacuum-cleaned.

    A TransientModel has a simplified access rights management, all users can
    create new records, and may only access the records they created. The
    superuser has unrestricted access to all TransientModel records.
    ",t,,,f,f,f,,,,
726,,,op.room.distribution,id,base,"{""en_US"": ""Room Distribution""}", Exam Room Distribution ,t,,,f,f,f,,,,
727,,,student.hall.ticket,id,base,"{""en_US"": ""Student Hall Ticket""}", Student Hall Ticket Wizard ,t,,,f,f,f,,,,
728,,,op.parent,id,base,"{""en_US"": ""Parent""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
729,,,op.parent.relationship,id,base,"{""en_US"": ""Relationships""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
730,,,op.author,id,base,"{""en_US"": ""Media Author""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
731,,,op.library.card.type,id,base,"{""en_US"": ""Library Card Type""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
732,,,op.library.card,id,base,"{""en_US"": ""Library Card""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
734,,,op.media.movement,return_date DESC,base,"{""en_US"": ""Media Movement""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
735,,,op.media.purchase,id,base,"{""en_US"": ""Media Purchase Request""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
736,,,op.media.queue,id,base,"{""en_US"": ""Media Queue Request""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
737,,,op.media.type,id,base,"{""en_US"": ""Media Type""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
738,,,op.media.unit,name,base,"{""en_US"": ""Media Unit""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,t,f,f,,,,
739,,,op.publisher,id,base,"{""en_US"": ""Publisher""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
740,,,op.tag,id,base,"{""en_US"": ""Media Tags""}"," Main super-class for regular database-persisted Odoo models.

    Odoo models are created by inheriting from this class::

        class user(Model):
            ...

    The system will later instantiate the class once per database (on
    which the class' module is installed).
    ",f,,,f,f,f,,,,
741,,,report.openeducat_library.report_library_card_barcode,id,base,"{""en_US"": ""Library Card Barcode Report""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
742,,,report.openeducat_library.report_media_barcode,id,base,"{""en_US"": ""Media Barcode Report""}"," The base model, which is implicitly inherited by all models. ",f,,,f,f,f,,,,
743,,,issue.media,id,base,"{""en_US"": ""Issue Media Wizard""}", Issue Media ,t,,,f,f,f,,,,
744,,,reserve.media,id,base,"{""en_US"": ""Media Reserve""}", Reserve Media ,t,,,f,f,f,,,,
745,,,return.media,id,base,"{""en_US"": ""Media Author""}", Retrun Media Wizard ,t,,,f,f,f,,,,
